#!/opt/homebrew/bin/bash

# Global Vars
MODULE_NAME="PRE_DISBURSAL"
WFC_NAME_PREFIX="default"

# Input Vars

if [ -z "$1" ] || [ -z "$2" ]; then
	echo "Usage: $0 <SOURCE_INFO_REDASH_QUERY_API> <WORKFLOW_LIST_REDASH_QUERY_API>"
	exit 1
fi

SOURCE_INFO_REDASH_QUERY_API="$1"
WORKFLOW_LIST_REDASH_QUERY_API="$2"

pd_workflow_config() {
	local source_entity_id="$1"
	local organization_id="$2"
	local program_name="$3"
	local lender_id="$4"

	# UUID for config_id and JSON ID
	config_id=$(uuidgen | tr '[:upper:]' '[:lower:]')

	# Compose workflow_definition JSON for PRE_DISBURSAL module
	read -r -d '' workflow_config_json <<EOM
{
  "id": "$config_id",
  "name": "${WFC_NAME_PREFIX}_pre_disbursal",
  "start": "ValidateUnderwritingPreDisbursal",
  "states": [
    {
      "end": true,
      "name": "ValidateUnderwritingPreDisbursal",
      "type": "operation",
      "actions": [
        {
          "functionRef": {
            "refName": "ValidateUnderwritingPreDisbursal",
            "arguments": {}
          }
        }
      ],
      "metadata": {
        "moduleNameTag": "PRE_DISBURSAL",
        "subModuleNameTag": "WAIT"
      }
    }
  ],
  "version": "1.0.0",
  "specVersion": "0.0.1"
}
EOM

	insert-workflow-config \
		--config_id "$config_id" \
		--source_entity_id "$source_entity_id" \
		--lender_id "$lender_id" \
		--organization_id "$organization_id" \
		--program_name "$program_name" \
		--module_name "$MODULE_NAME" \
		--workflow_definition "$workflow_config_json" \
		--skip-update
}

pd_wait_section_config() {
	local source_entity_id="$1"
	local organization_id="$2"
	local program_name="$3"

	# UUID for config_id and JSON ID
	config_id=$(uuidgen | tr '[:upper:]' '[:lower:]')

	# Compose section_data JSON for WAIT page
	read -r -d '' section_data <<EOM
{
  "key": "WAIT",
  "sections": [
    {
      "key": "wait",
      "type": "page",
      "title": "",
      "sequence": 0,
      "components": [
        {
          "type": "wait",
          "fields": []
        }
      ],
      "description": ""
    }
  ]
}
EOM

	insert-section-config \
		--config_id "$config_id" \
		--source_entity_id "$source_entity_id" \
		--organization_id "$organization_id" \
		--program_name "$program_name" \
		--module_name "$MODULE_NAME" \
		--sub_module_name "WAIT" \
		--section_data "$section_data" \
		--skip-update
}

insert_pre_disbursal_module_jq() {
	local json="$1"
	echo "$json" | jq '
	.modules |= (
	  if any(.[]; .moduleName == "ESIGN") and (all(.[]; .moduleName != "PRE_DISBURSAL")) then
	    map(
	      if .moduleName == "ESIGN" then
	        {"moduleName": "PRE_DISBURSAL", "moduleType": "POST_OFFER", "isActive": true},
	        .
	      else
	        .
	      end
	    )
	  else
	    .
	  end
	)'
}

escape_single_quotes() {
	perl -pe "s/(?<!')'(?!')/''/g"
}

insert_pre_disbursal_module_sql() {
	local workflow_id="$1"
	local modified_json="$2"
	local workflow_name="$3"
	local escaped_json

	# Escape single quotes in JSON for SQL
	escaped_json=$(echo "$modified_json" | escape_single_quotes)

	cat <<EOF
-- Add PRE_DISBURSAL module in $workflow_name
UPDATE workflow
SET workflow_data = '$escaped_json'
WHERE workflow_id = '$workflow_id';

EOF
}

pd_temporal_rollout_100() {
	local source_entity_id="$1"

	# UUID for config_id and JSON ID
	config_id=$(uuidgen | tr '[:upper:]' '[:lower:]')

	cat <<EOF
-- Set temporal rollout to 100 for PRE_DISBURSAL module
INSERT INTO temporal_rollouts (
    rollout_id,
    source_entity_id,
    module_name,
    created_at,
    updated_at,
    percentage
) VALUES (
    '$config_id',
    '$source_entity_id',
    '$MODULE_NAME',
    NOW(),
    NOW(),
    100
);

EOF
}

call_redash() {
	local api_url="$1"
	local __resultvar="$2"
	local json_data

	if ! json_data=$(curl -s --fail -X GET "$api_url"); then
		echo "❌ Error: Failed to fetch data from API"
		return 1
	fi

	if echo "$json_data" | jq -e '.message == "No cached result found for this query."' >/dev/null 2>&1; then
		echo "❌ Error: No cached result found for this query"
		return 1
	fi

	# Set the output variable indirectly
	eval "$__resultvar=\"\$json_data\""
	return 0
}

if ! call_redash "$WORKFLOW_LIST_REDASH_QUERY_API" JSON_DATA; then
	exit 1
fi
while IFS= read -r row; do
	if [ -n "$row" ]; then
		workflow_id=$(echo "$row" | jq -r '.workflow_id')
		workflow_name=$(echo "$row" | jq -r '.workflow_name')
		workflow_data=$(echo "$row" | jq -r '.workflow_data')

		WFC_NAME_PREFIX=$(echo "$workflow_name" | cut -d'_' -f1)

		workflow_data_with_pd_module=$(insert_pre_disbursal_module_jq "$workflow_data")
		if [ "$workflow_data_with_pd_module" == "$workflow_data" ]; then
			echo "⏭️  Skipping $workflow_name — already has PRE_DISBURSAL module or has no ESIGN module"
			continue
		fi

		go_migration_output=$(go run cmd/sql/generate.go "-table=add_pre_disbursal_module_in_${workflow_name}" 2>&1)
		migration_file=$(echo "$go_migration_output" | gawk '{print $6}')

		insert_pre_disbursal_module_sql "$workflow_id" "$workflow_data_with_pd_module" "$workflow_name" >"$(pwd)/$migration_file"

		git add "$(pwd)/$migration_file"
		git commit -m "feat: added pre disbursal module in $workflow_name"

		echo "✅ Processed workflow: $workflow_name (ID: $workflow_id)"
	fi
done < <(echo "$JSON_DATA" | jq -c '.query_result.data.rows[]')

if ! call_redash "$SOURCE_INFO_REDASH_QUERY_API" JSON_DATA; then
	exit 1
fi
# Fetch source_entity_id
source_entity_id=$(echo "$JSON_DATA" | jq .query_result.query | cut -d"'" -f2)
echo "📥 RECEIVED > source_entity_id: $source_entity_id"
# Fetch organization_id and program_name for the source_entity_id
while IFS= read -r row; do
	if [ -n "$row" ]; then
		organization_id=$(echo "$row" | jq -r '.organization_id')
		program_name=$(echo "$row" | jq -r '.program_name')

		echo "📥 RECEIVED > organization_id: $organization_id"
		echo "📥 RECEIVED > program_name: $program_name"
	fi
done < <(echo "$JSON_DATA" | jq -c '.query_result.data.rows[]')

go_migration_output=$(go run cmd/sql/generate.go "-table=add_pre_disbursal_workflow_config_${WFC_NAME_PREFIX}" 2>&1)
migration_file=$(echo "$go_migration_output" | gawk '{print $6}')

pd_workflow_config "$source_entity_id" "$organization_id" "$program_name" "${4:-}" >"$(pwd)/$migration_file"
git add "$(pwd)/$migration_file"
git commit -m "feat: added PRE_DISBURSAL workflow config for $WFC_NAME_PREFIX"
echo "✅ [$WFC_NAME_PREFIX] Added workflow config for PRE_DISBURSAL module"

go_migration_output=$(go run cmd/sql/generate.go "-table=add_wait_submodule_config_for_pre_disbursal_module_${WFC_NAME_PREFIX}" 2>&1)
migration_file=$(echo "$go_migration_output" | gawk '{print $6}')

pd_wait_section_config "$source_entity_id" "$organization_id" "$program_name" >"$(pwd)/$migration_file"
git add "$(pwd)/$migration_file"
git commit -m "feat: added wait submodule for PRE_DISBURSAL module for $WFC_NAME_PREFIX"
echo "✅ [$WFC_NAME_PREFIX] Added WAIT submodule section config for PRE_DISBURSAL module"

go_migration_output=$(go run cmd/sql/generate.go "-table=set_temporal_rollout_to_100_for_pre_disbursal_module_${WFC_NAME_PREFIX}" 2>&1)
migration_file=$(echo "$go_migration_output" | gawk '{print $6}')

pd_temporal_rollout_100 "$source_entity_id" >"$(pwd)/$migration_file"
git add "$(pwd)/$migration_file"
git commit -m "feat: set temporal rollout to 100 for PRE_DISBURSAL module for $WFC_NAME_PREFIX"
echo "✅ [$WFC_NAME_PREFIX] Set TEMPORAL ROLLOUT to 100 for PRE_DISBURSAL module"
