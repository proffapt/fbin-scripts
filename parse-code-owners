#!/bin/bash
set -euo pipefail

# Branch prefix is mandatory
if [ "$#" -lt 1 ]; then
	echo "Usage: $0 <branch-prefix>"
	exit 1
fi

BRANCH_PREFIX="$1"

# Get changed files automatically
CHANGED_FILES=($(git diff --name-only))

if [ "${#CHANGED_FILES[@]}" -eq 0 ]; then
	echo "No changed files found."
	exit 0
fi

CODEOWNERS_FILE=".github/CODEOWNERS"
if [ ! -f "$CODEOWNERS_FILE" ]; then
	echo "CODEOWNERS file not found at $CODEOWNERS_FILE"
	exit 1
fi

# Parse CODEOWNERS
PATTERNS=()
REVIEWERS=()

while IFS= read -r line || [[ -n "$line" ]]; do
	[[ -z "$line" || "$line" =~ ^# ]] && continue

	pattern=$(echo "$line" | awk '{print $1}')
	reviewers=$(echo "$line" | awk '{$1=""; print $0}' | xargs)

	# Normalize directory patterns
	if [[ "$pattern" != */ && ! "$pattern" =~ \.[^/]+$ ]]; then
		pattern="$pattern/"
	fi

	pattern=${pattern#./}
	PATTERNS+=("$pattern")
	REVIEWERS+=("$reviewers")
done <"$CODEOWNERS_FILE"

# Function to find reviewers for a file
get_reviewers() {
	local file="$1"
	file=${file#./}
	for i in "${!PATTERNS[@]}"; do
		pattern=${PATTERNS[$i]}
		reviewers=${REVIEWERS[$i]}
		# Always match as prefix
		if [[ "$file" == "$pattern"* ]]; then
			echo "$reviewers"
			return
		fi
	done
	echo "unassigned"
}

# Group files by reviewer set using plain arrays
PR_GROUP_KEYS=()  # reviewer key strings
PR_GROUP_FILES=() # corresponding files list

for f in "${CHANGED_FILES[@]}"; do
	reviewers=$(get_reviewers "$f" | tr ' ' '\n' | sort -u | tr '\n' ',' | sed 's/,$//')
	[[ -z "$reviewers" ]] && reviewers="unassigned"

	found=0
	for i in "${!PR_GROUP_KEYS[@]}"; do
		if [[ "${PR_GROUP_KEYS[$i]}" == "$reviewers" ]]; then
			PR_GROUP_FILES[$i]="${PR_GROUP_FILES[$i]} $f"
			found=1
			break
		fi
	done
	if [[ $found -eq 0 ]]; then
		PR_GROUP_KEYS+=("$reviewers")
		PR_GROUP_FILES+=("$f")
	fi
done

TOTAL_FILES=${#CHANGED_FILES[@]}

# Print plan
echo "======= PR PLAN ======="
pr_num=1
for i in "${!PR_GROUP_KEYS[@]}"; do
	reviewers="${PR_GROUP_KEYS[$i]}"
	files="${PR_GROUP_FILES[$i]}"
	read -ra files_array <<<"$files"
	file_count=${#files_array[@]}

	echo "PR $pr_num ($file_count/$TOTAL_FILES files):"
	echo "  Reviewers: $reviewers"
	echo "  Files:"
	for file in "${files_array[@]}"; do
		echo "    - $file"
	done
	echo
	((pr_num++))
done

# Ask for confirmation
read -rp "Do you want to create branches and commit these files? (y/N) " confirm
if [[ "$confirm" != "y" && "$confirm" != "Y" ]]; then
	echo "Aborted."
	exit 0
fi

# Ask if splitting is needed
read -rp "Do you want to split PRs with more than 30 files? (y/N) " split_confirm
SPLIT_ENABLED=0
if [[ "$split_confirm" == "y" || "$split_confirm" == "Y" ]]; then
	SPLIT_ENABLED=1
fi

# Ask for common commit message
read -rp "Enter common commit message: " COMMIT_MSG

# Create branches and commit files
pr_num=1
for i in "${!PR_GROUP_KEYS[@]}"; do
	reviewers="${PR_GROUP_KEYS[$i]}"
	files="${PR_GROUP_FILES[$i]}"
	read -ra files_array <<<"$files"

	if [[ $SPLIT_ENABLED -eq 1 && ${#files_array[@]} -gt 30 ]]; then
		# Split into chunks of 30
		chunk_num=1
		for ((j = 0; j < ${#files_array[@]}; j += 30)); do
			chunk=("${files_array[@]:j:30}")
			branch_name="${BRANCH_PREFIX}-${pr_num}_chunk${chunk_num}"

			git checkout -b "$branch_name"
			git add "${chunk[@]}"
			git commit -m "$COMMIT_MSG"
			git checkout -
			((chunk_num++))
		done
	else
		# Normal PR
		branch_name="${BRANCH_PREFIX}-${pr_num}"
		git checkout -b "$branch_name"
		git add "${files_array[@]}"
		git commit -m "$COMMIT_MSG"
		git checkout -
	fi

	((pr_num++))
done

echo "Branches created and commits done."
